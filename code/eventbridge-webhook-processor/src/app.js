/*
    Code to convert an Eventbridge message as generated by Amazon Connect Contact Lens,
    and convert them into messages for Teams with proper formatting for review.

    Input:
    --------
        event: A JSON Object representing the Eventbridge Message. Example
            """
            {
                "version": "0", // set by EventBridge
                "id": "aaaaaaaa-bbbb-cccc-dddd-bf3703467718", // set by EventBridge
                "source": "aws.connect",
                "detail-type": "Contact Lens Realtime Rules Matched", 
                "account": "your AWS account ID",
                "time": "2020-04-27T18:43:48Z",
                "region": "us-east-1", // set by EventBridge
                "resources": ["arn:aws:connect:us-east-1:your AWS account ID:instance/instance-ARN"],
                "detail": {
                    "version": "1.0",
                    "ruleName": "ACCOUNT_CANCELLATION", // Rule name
                    "actionName": "NOTIFY_CUSTOMER_RETENTION",
                    "instanceArn": "arn:aws:connect:us-east-1:your AWS account ID:instance/instance-ARN",
                    "contactArn": "arn:aws:connect:us-east-1:your AWS account ID:instance/instance-ARN/contact/contact-ARN",
                    "agentArn": "arn:aws:connect:us-east-1:your AWS account ID:instance/instance-ARN/agent/agent-ARN",
                    "queueArn": "arn:aws:connect:us-east-1:your AWS account ID:instance/instance-ARN/queue/queue-ARN"
                }
            }
            """
    
    Output:
    --------
        string: Response from MS Teams, for success just the value "1"
        
*/

import { SSMClient, GetParameterCommand } from "@aws-sdk/client-ssm";
// Connect URL for constructing link. This could be removed if value is low, but allows
// hot linking to reports and the like
const CONNECT_URL = process.env.CONNECT_URL
const TIMEZONE = process.env.TIMEZONE ?? "Pacific/Auckland"
const LOCALE_STRING = process.env.LOCALE_STRING ?? "en-NZ"

/* Top level await so it is retrieve only when Lambda is initially started.
* This retrieves the Webhook URL securely so it isn't exposed any more than 
* should be required since it requires not other auth
*/
const ssmClient = new SSMClient();
const input = {
  "Name": process.env.PARAMETER_NAME,
  "WithDecryption": true
}
const command = new GetParameterCommand(input);
const parameter = await ssmClient.send(command);

export async function lambda_handler(event) {
  console.log(JSON.stringify(event));
  let result = null;
  const date = new Date();

  try {
    // If either of these are missing we aren't invoking correctly. Let it exception
    const detail_type = event['detail-type']
    const details = event.detail

    const contact_arn = details['contactArn']
    const contact_id = contact_arn.substring(contact_arn.lastIndexOf("/") + 1)

    let fact_section = [
      {
        "title": "Rule",
        "value": details?.ruleName ?? "Name Undefined"
      },
      {
        "title": "Action Name",
        "value": details?.actionName ?? "Action Undefined"
      },
      {
        "title": "Triggered Time",
        "value": new Date(Date.parse(event.time)).toLocaleString(LOCALE_STRING, { timeZone: TIMEZONE })
      },
      {
        "title": "Rule Source",
        "value": detail_type
      }
    ]

    let actions = [
      {
        "type": "Action.OpenUrl",
        "title": "Review in Rules",
        "url": `https://${CONNECT_URL}/rules`,
        "role": "button"
      }
    ]

    if (contact_id !== "*") {
      fact_section.push({
        "title": "Contact ID",
        "value": contact_id
      })

      actions.push({
        "type": "Action.OpenUrl",
        "title": "Review Contact Details",
        "url": `https://${CONNECT_URL}/contact-trace-records/details/${contact_id}?tz=${TIMEZONE}`,
        "role": "button"
      })
    }

    /*
    * Adaptive cards are reasonably well documented and modifiable. Rather than trying to be too
    * fancy, since we know the explicit structure, lets predefine and populate. More at
    * https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using?tabs=cURL%2Ctext1#send-adaptive-cards-using-an-incoming-webhook
    */
    const data = {
      "type": "message",
      "attachments": [
        {
          "contentType": "application/vnd.microsoft.card.adaptive",
          "contentUrl": null,
          "content": {
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.2",
            "body": [
              {
                "type": "TextBlock",
                "size": "medium",
                "weight": "bolder",
                "text": "Incoming AWS Alert",
                "style": "heading",
                "wrap": true
              },
              {
                "type": "TextBlock",
                "spacing": "none",
                "text": `Created ${date.toLocaleString(LOCALE_STRING, { timeZone: TIMEZONE })}`,
                "isSubtle": true,
                "wrap": true
              },
              {
                "type": "FactSet",
                "facts": fact_section
              },
            ],
            "actions": actions
          }
        }
      ]
    };

    // Expected format to the webhook URL. Worth noting there is no auth
    // on this so the value should be protected
    const response = await fetch(parameter.Parameter.Value, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    result = await response.text();
    // Note that in this situation a valid response is string "1", otherwise an exception

  } catch (error) {
    console.error("Error:", error);
    result = "Are you sure you invoked this using the correct event?"
  }
  console.log(result);
  return result;
};
